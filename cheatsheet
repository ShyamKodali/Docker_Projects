-> histoty | grep docker


BUILD :- 

-> docker build -f /path/to/a/Dockerfile
-> docker build . 
-> docker build -t <specifed_image_name> . 

ex: 
# Dockerfile
# Dockerfile for base image of actInbox
    FROM ksk/base

# We need to build the base image first, then build <specifed_image_name:tag> 

-> docker build -t ksk/base -f Dockerfile.base
-> docker build -t <specifed_image_name:tag> -f Docker.<specifed_image_name:tag>

IMAGES :- 

-> docker images 
-> docker pull <image-name:tags>
-> docker push <image-name:tags>
-> docker run -dit -p6000:3679 --name <choose_specific_name> <image-name>  # -it = Iteractive Terminal # -p = port binding # -d = to run in same Terminal
-> docker exec -it <specifed_image_name>  # -it = Iteractive Terminal 
-> docker rmi image # rmi = remove image


CONTAINERS :-

-> docker ps 
-> docker ps -a  # All containers 
-> docker exec -it <container_id>  # -it = Iteractive Terminal
-> docker logs <container_id> 
-> docker run -dit <container_id> 
-> docker run -dit --add-host host.docker <container_id> 
-> docker run -dit --network=host <container_id>:latest 
-> docker restart <container_id>
-> docker kill <container_id>  
-> docker stats # Shows running container stats 
-> docker stop <container_id>
-> docker start <container_id> 
-> docker rm <container_id>  # rm = remove


VOLUMES :- 

-> docker run -v /home/mount/data : /var/lib/data  # -v = volume, /home/mount/data = Host Directory, : = Mounting, /var/lib/data = Container Directory
-> docker run -v /var/lib/data #  -v /var/lib/data = Anonymous Volume
-> docker run -v name:/var/lib/data # name = Specified name of folder that refers directory on the Host File system 


COMPOSE :-

# Dedicated docker compose folder is required and need to run docker-compose in same folder 
# OR ELSE we need to specify path with -f 
# Creates bridge network as default and puts our container inside
================================================================================================

# Create more number of CONTAINERS and NETWORKS inside the docker compose

-> docker-compose ps # Shows the containers present in that composed environment
-> docker-compose -p <project_name> up -d  # -p = pecify a project name; If no -p then it uses directory name 
-> docker-compose down 
-> docker-compose stop # Stopping containers 

OTHERS :- 

-> docker network create <network_name> 


MISCELLANEOUS :- 

-> docker system df # Check docker daemon disk space usage
-> docker system prune -af # Remove images, networks, containers, and volumes



